// Code generated by mockery. DO NOT EDIT.

package users

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockGetUsersProcessor is an autogenerated mock type for the GetUsersProcessor type
type MockGetUsersProcessor struct {
	mock.Mock
}

// ProcessRequest provides a mock function with given fields: ctx, userId
func (_m *MockGetUsersProcessor) ProcessRequest(ctx context.Context, userId string) (*UserResponse, error) {
	ret := _m.Called(ctx, userId)

	var r0 *UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*UserResponse, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *UserResponse); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockGetUsersProcessor creates a new instance of MockGetUsersProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetUsersProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetUsersProcessor {
	mock := &MockGetUsersProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
