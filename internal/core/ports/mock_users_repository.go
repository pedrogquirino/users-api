// Code generated by mockery. DO NOT EDIT.

package ports

import (
	context "context"
	users "users-api/internal/core/domain/users"

	mock "github.com/stretchr/testify/mock"
)

// MockUsersRepository is an autogenerated mock type for the UsersRepository type
type MockUsersRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx
func (_m *MockUsersRepository) Find(ctx context.Context) ([]users.User, error) {
	ret := _m.Called(ctx)

	var r0 []users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]users.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []users.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MockUsersRepository) GetById(ctx context.Context, id string) (*users.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*users.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *users.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, user
func (_m *MockUsersRepository) Save(ctx context.Context, user *users.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *users.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockUsersRepository creates a new instance of MockUsersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsersRepository {
	mock := &MockUsersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
